//+------------------------------------------------------------------+
//|                                                 |
//|                        Copyright 2025, MetaQuotes Software Corp. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, Dubravaspb"
#property link      "https://www.mql5.com"
#property version   "1.07"
#property indicator_separate_window
#property indicator_buffers 4
#property indicator_plots   3

//--- plot VFI
#property indicator_label1  "VFI"
#property indicator_type1   DRAW_LINE
#property indicator_color1  clrGreen
#property indicator_style1  STYLE_SOLID
#property indicator_width1  2

//--- plot VFI EMA
#property indicator_label2  "EMA of VFI"
#property indicator_type2   DRAW_LINE
#property indicator_color2  clrOrange
#property indicator_style2  STYLE_SOLID
#property indicator_width2  1

//--- plot Histogram
#property indicator_label3  "Histogram"
#property indicator_type3   DRAW_HISTOGRAM
#property indicator_color3  clrGray
#property indicator_style3  STYLE_SOLID
#property indicator_width3  3

//--- input parameters
input int      VFI_Length = 130;        // VFI length
input double   Coef = 0.2;              // Coefficient
input double   VCoef = 2.5;             // Max. vol. cutoff
input int      SignalLength = 5;        // Signal length
input bool     SmoothVFI = false;       // Smooth VFI
input bool     ShowHisto = false;       // Show Histogram
input bool     UseRealVolume = false;   // Use Real Volume (if available)

//--- indicator buffers
double VFI_Buffer[];
double VFI_EMA_Buffer[];
double Histogram_Buffer[];
double VCP_Buffer[];

//--- arrays for calculations
double inter_array[];
double typical_array[];

//--- global variables
bool real_volumes_available = false;
bool is_russian_system = false;
int last_calculated = 0; // Добавляем для отслеживания пересчета

//+------------------------------------------------------------------+
//| Определение языка системы                                       |
//+------------------------------------------------------------------+
bool IsRussianSystem()
{
    // Получаем язык терминала
    string terminal_language = TerminalInfoString(TERMINAL_LANGUAGE);
    
    // Проверяем, является ли язык русским
    if(terminal_language == "Russian" || terminal_language == "Русский" || 
       StringFind(terminal_language, "RU") >= 0 || StringFind(terminal_language, "ru") >= 0)
    {
        return true;
    }
    
    // Дополнительная проверка через локализацию чисел
    string test_number = DoubleToString(1.5, 1);
    if(StringFind(test_number, ",") >= 0) // В русской локали десятичный разделитель - запятая
    {
        return true;
    }
    
    return false;
}

//+------------------------------------------------------------------+
//| Получение локализованного текста                                |
//+------------------------------------------------------------------+
string GetLocalizedText(string key)
{
    if(!is_russian_system)
    {
        // English texts
        if(key == "volume_check_header") return "           VFI INDICATOR VOLUME CHECK           ";
        if(key == "symbol") return "Symbol";
        if(key == "datetime") return "Date/time";
        if(key == "user") return "User";
        if(key == "execution_type") return "Execution type";
        if(key == "terminal_paths") return "DEBUG - Terminal paths";
        if(key == "bars_analyzed") return "Bars analyzed";
        if(key == "tick_volumes") return "TICK VOLUMES";
        if(key == "average") return "Average";
        if(key == "maximum") return "Maximum";
        if(key == "minimum") return "Minimum";
        if(key == "zero_bars") return "Bars with zero volume";
        if(key == "real_volumes") return "REAL VOLUMES";
        if(key == "real_volumes_unavailable") return "REAL VOLUMES: Unavailable";
        if(key == "quality_assessment") return "QUALITY ASSESSMENT";
        if(key == "recommendation") return "RECOMMENDATION";
        if(key == "indicator_settings") return "INDICATOR SETTINGS";
        if(key == "will_use_real") return "Will use: REAL VOLUMES";
        if(key == "will_use_tick") return "Will use: TICK VOLUMES";
        if(key == "yes") return "YES";
        if(key == "no") return "NO";
        if(key == "error_no_data") return "❌ ERROR: Could not get price data!";
        if(key == "critical_no_volumes") return "❌ CRITICAL: Very little volume data";
        if(key == "poor_no_variation") return "⚠️ POOR: Volumes hardly change";
        if(key == "satisfactory_tick_only") return "⚠️ SATISFACTORY: Tick volumes only";
        if(key == "excellent_real_volumes") return "✅ EXCELLENT: Quality real volumes";
        if(key == "good_real_gaps") return "✅ GOOD: Real volumes with gaps";
        if(key == "change_instrument") return "Change instrument or broker";
        if(key == "may_work_incorrectly") return "Indicator may work incorrectly";
        if(key == "will_work_less_accurate") return "Indicator will work, but less accurately";
        if(key == "will_work_max_accurate") return "Indicator will work with maximum accuracy";
        if(key == "will_work_correctly") return "Indicator will work correctly";
        if(key == "indicator_finished") return "         VFI INDICATOR FINISHED WORK         ";
        if(key == "reason") return "Reason";
        if(key == "time") return "Time";
        if(key == "parameter_error") return "Parameter Error";
        if(key == "invalid_vfi_length") return "VFI_Length must be >= 10";
        if(key == "invalid_signal_length") return "SignalLength must be >= 1";
        if(key == "invalid_coefficients") return "Coefficients must be positive";
        if(key == "settings_changed") return "Settings changed - recalculating all data";
    }
    else
    {
        // Russian texts
        if(key == "volume_check_header") return "           ПРОВЕРКА ОБЪЕМОВ VFI ИНДИКАТОРА           ";
        if(key == "symbol") return "Символ";
        if(key == "datetime") return "Дата/время";
        if(key == "user") return "Пользователь";
        if(key == "execution_type") return "Тип исполнения";
        if(key == "terminal_paths") return "DEBUG - Пути терминала";
        if(key == "bars_analyzed") return "Получено баров для анализа";
        if(key == "tick_volumes") return "ТИКОВЫЕ ОБЪЕМЫ";
        if(key == "average") return "Средний";
        if(key == "maximum") return "Максимальный";
        if(key == "minimum") return "Минимальный";
        if(key == "zero_bars") return "Баров с нулевым объемом";
        if(key == "real_volumes") return "РЕАЛЬНЫЕ ОБЪЕМЫ";
        if(key == "real_volumes_unavailable") return "РЕАЛЬНЫЕ ОБЪЕМЫ: Недоступны";
        if(key == "quality_assessment") return "ОЦЕНКА КАЧЕСТВА";
        if(key == "recommendation") return "РЕКОМЕНДАЦИЯ";
        if(key == "indicator_settings") return "НАСТРОЙКИ ИНДИКАТОРА";
        if(key == "will_use_real") return "Будут использованы: РЕАЛЬНЫЕ ОБЪЕМЫ";
        if(key == "will_use_tick") return "Будут использованы: ТИКОВЫЕ ОБЪЕМЫ";
        if(key == "yes") return "ДА";
        if(key == "no") return "НЕТ";
        if(key == "error_no_data") return "❌ ОШИБКА: Не удалось получить данные по ценам!";
        if(key == "critical_no_volumes") return "❌ КРИТИЧНО: Очень мало данных по объемам";
        if(key == "poor_no_variation") return "⚠️ ПЛОХО: Объемы практически не меняются";
        if(key == "satisfactory_tick_only") return "⚠️ УДОВЛЕТВОРИТЕЛЬНО: Только тиковые объемы";
        if(key == "excellent_real_volumes") return "✅ ОТЛИЧНО: Качественные реальные объемы";
        if(key == "good_real_gaps") return "✅ ХОРОШО: Реальные объемы с пропусками";
        if(key == "change_instrument") return "Смените инструмент или брокера";
        if(key == "may_work_incorrectly") return "Индикатор может работать некорректно";
        if(key == "will_work_less_accurate") return "Индикатор будет работать, но менее точно";
        if(key == "will_work_max_accurate") return "Индикатор будет работать максимально точно";
        if(key == "will_work_correctly") return "Индикатор будет работать корректно";
        if(key == "indicator_finished") return "         VFI ИНДИКАТОР ЗАВЕРШИЛ РАБОТУ         ";
        if(key == "reason") return "Причина";
        if(key == "time") return "Время";
        if(key == "parameter_error") return "Ошибка параметров";
        if(key == "invalid_vfi_length") return "VFI_Length должно быть >= 10";
        if(key == "invalid_signal_length") return "SignalLength должно быть >= 1";
        if(key == "invalid_coefficients") return "Коэффициенты должны быть положительными";
        if(key == "settings_changed") return "Настройки изменены - пересчитываем все данные";
    }
    
    return key; // Return key if translation not found
}

//+------------------------------------------------------------------+
//| Получение имени пользователя компьютера                         |
//+------------------------------------------------------------------+
string GetComputerUserName()
{
    string username = "xs99ewti"; // Default username
    
    // Try to extract from TERMINAL_DATA_PATH
    string data_path = TerminalInfoString(TERMINAL_DATA_PATH);
    
    if(StringLen(data_path) > 0)
    {
        // Look for Users\username pattern
        int pos = StringFind(data_path, "Users\\");
        if(pos >= 0)
        {
            int start = pos + 6; // length of "Users\"
            int end = StringFind(data_path, "\\", start);
            if(end > start)
            {
                string extracted = StringSubstr(data_path, start, end - start);
                if(StringLen(extracted) > 0 && extracted != "AppData" && 
                   extracted != "Roaming" && extracted != "MetaQuotes")
                {
                    username = extracted;
                }
            }
        }
        
        // Alternative pattern search
        if(username == "xs99ewti")
        {
            pos = StringFind(data_path, "user\\");
            if(pos >= 0)
            {
                int start = pos + 5;
                int end = StringFind(data_path, "\\", start);
                if(end > start)
                {
                    string extracted = StringSubstr(data_path, start, end - start);
                    if(StringLen(extracted) > 0)
                    {
                        username = extracted;
                    }
                }
            }
        }
    }
    
    // Clean up username
    StringReplace(username, " ", "_");
    if(StringLen(username) > 20)
        username = StringSubstr(username, 0, 20);
    
    return(username);
}

//+------------------------------------------------------------------+
//| Получение текущей даты и времени в UTC                          |
//+------------------------------------------------------------------+
string GetCurrentDateTime()
{
    datetime current_time = TimeGMT();
    MqlDateTime dt;
    TimeToStruct(current_time, dt);
    
    return(StringFormat("%04d-%02d-%02d %02d:%02d:%02d", 
                       dt.year, dt.mon, dt.day, dt.hour, dt.min, dt.sec));
}

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
{
    // Validate input parameters
    if(VFI_Length < 10)
    {
        Print("❌ ", GetLocalizedText("parameter_error"), ": ", GetLocalizedText("invalid_vfi_length"));
        return(INIT_PARAMETERS_INCORRECT);
    }
    
    if(SignalLength < 1)
    {
        Print("❌ ", GetLocalizedText("parameter_error"), ": ", GetLocalizedText("invalid_signal_length"));
        return(INIT_PARAMETERS_INCORRECT);
    }
    
    if(Coef <= 0 || VCoef <= 0)
    {
        Print("❌ ", GetLocalizedText("parameter_error"), ": ", GetLocalizedText("invalid_coefficients"));
        return(INIT_PARAMETERS_INCORRECT);
    }
    
    // Determine system language
    is_russian_system = IsRussianSystem();
    
    // ВАЖНО: Сбрасываем счетчик при смене настроек
    last_calculated = 0;
    
    //--- indicator buffers mapping
    SetIndexBuffer(0, VFI_Buffer, INDICATOR_DATA);
    SetIndexBuffer(1, VFI_EMA_Buffer, INDICATOR_DATA);
    SetIndexBuffer(2, Histogram_Buffer, INDICATOR_DATA);
    SetIndexBuffer(3, VCP_Buffer, INDICATOR_CALCULATIONS);
    
    //--- set accuracy
    IndicatorSetInteger(INDICATOR_DIGITS, 4);
    
    //--- set short name
    IndicatorSetString(INDICATOR_SHORTNAME, "VFI_LB(" + 
                      IntegerToString(VFI_Length) + "," + 
                      DoubleToString(Coef, 1) + "," + 
                      DoubleToString(VCoef, 1) + ")");
    
    //--- set zero level
    IndicatorSetDouble(INDICATOR_LEVELVALUE, 0, 0.0);
    
    //--- set empty values
    PlotIndexSetDouble(0, PLOT_EMPTY_VALUE, EMPTY_VALUE);
    PlotIndexSetDouble(1, PLOT_EMPTY_VALUE, EMPTY_VALUE);
    PlotIndexSetDouble(2, PLOT_EMPTY_VALUE, EMPTY_VALUE);
    
    //--- hide histogram if not needed
    if(!ShowHisto)
        PlotIndexSetInteger(2, PLOT_DRAW_TYPE, DRAW_NONE);
    else
        PlotIndexSetInteger(2, PLOT_DRAW_TYPE, DRAW_HISTOGRAM);
    
    //--- initialize calculation arrays
    ArrayResize(inter_array, 0);
    ArrayResize(typical_array, 0);
    
    //--- check volume data
    CheckVolumeData();
    
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Проверка наличия и качества данных по объемам                   |
//+------------------------------------------------------------------+
void CheckVolumeData()
{
    string symbol = Symbol();
    string username = GetComputerUserName();
    string current_datetime = GetCurrentDateTime();
    
    Print("╔══════════════════════════════════════════════════════════════════╗");
    Print("║", GetLocalizedText("volume_check_header"), "║");
    Print("╠══════════════════════════════════════════════════════════════════╣");
    Print("║ ", GetLocalizedText("symbol"), ": ", symbol);
    Print("║ ", GetLocalizedText("datetime"), ": ", current_datetime, " UTC");
    Print("║ ", GetLocalizedText("user"), ": ", username);
    Print("╠══════════════════════════════════════════════════════════════════╣");
    
    // Debug terminal paths
    Print("║ ", GetLocalizedText("terminal_paths"), ":");
    Print("║   TERMINAL_PATH: ", TerminalInfoString(TERMINAL_PATH));
    Print("║   TERMINAL_DATA_PATH: ", TerminalInfoString(TERMINAL_DATA_PATH));
    Print("║   TERMINAL_COMMONDATA_PATH: ", TerminalInfoString(TERMINAL_COMMONDATA_PATH));
    Print("╠══════════════════════════════════════════════════════════════════╣");
    
    // Check execution type
    ENUM_SYMBOL_TRADE_EXECUTION execution = (ENUM_SYMBOL_TRADE_EXECUTION)SymbolInfoInteger(symbol, SYMBOL_TRADE_EXEMODE);
    string exec_type = "";
    switch(execution)
    {
        case SYMBOL_TRADE_EXECUTION_REQUEST: exec_type = "Request"; break;
        case SYMBOL_TRADE_EXECUTION_INSTANT: exec_type = "Instant"; break;
        case SYMBOL_TRADE_EXECUTION_MARKET: exec_type = "Market"; break;
        case SYMBOL_TRADE_EXECUTION_EXCHANGE: exec_type = "Exchange"; break;
        default: exec_type = "Unknown";
    }
    Print("║ ", GetLocalizedText("execution_type"), ": ", exec_type);
    
    // Get test data
    MqlRates rates[];
    int copied = CopyRates(symbol, PERIOD_CURRENT, 0, 100, rates);
    
    if(copied <= 0)
    {
        Print("║ ", GetLocalizedText("error_no_data"));
        Print("╚══════════════════════════════════════════════════════════════════╝");
        return;
    }
    
    Print("║ ", GetLocalizedText("bars_analyzed"), ": ", copied);
    Print("╠══════════════════════════════════════════════════════════════════╣");
    
    // Analyze tick volumes
    long total_tick_volume = 0;
    long max_tick_volume = 0;
    long min_tick_volume = LONG_MAX;
    int zero_tick_volumes = 0;
    
    // Analyze real volumes
    long total_real_volume = 0;
    long max_real_volume = 0;
    long min_real_volume = LONG_MAX;
    int zero_real_volumes = 0;
    bool has_real_volumes = false;
    
    for(int i = 0; i < copied; i++)
    {
        // Tick volumes
        if(rates[i].tick_volume == 0)
            zero_tick_volumes++;
        
        total_tick_volume += rates[i].tick_volume;
        
        if(rates[i].tick_volume > max_tick_volume)
            max_tick_volume = rates[i].tick_volume;
            
        if(rates[i].tick_volume < min_tick_volume && rates[i].tick_volume > 0)
            min_tick_volume = rates[i].tick_volume;
        
        // Real volumes
        if(rates[i].real_volume > 0)
        {
            has_real_volumes = true;
            total_real_volume += rates[i].real_volume;
            
            if(rates[i].real_volume > max_real_volume)
                max_real_volume = rates[i].real_volume;
                
            if(rates[i].real_volume < min_real_volume)
                min_real_volume = rates[i].real_volume;
        }
        else
        {
            zero_real_volumes++;
        }
    }
    
    // Tick volume results
    double avg_tick_volume = (double)total_tick_volume / copied;
    Print("║ ", GetLocalizedText("tick_volumes"), ":");
    Print("║   ", GetLocalizedText("average"), ": ", (long)avg_tick_volume);
    Print("║   ", GetLocalizedText("maximum"), ": ", max_tick_volume);
    Print("║   ", GetLocalizedText("minimum"), ": ", min_tick_volume);
    Print("║   ", GetLocalizedText("zero_bars"), ": ", zero_tick_volumes, " (", 
          MathRound(zero_tick_volumes * 100.0 / copied), "%)");
    
    // Real volume results
    real_volumes_available = has_real_volumes;
    if(has_real_volumes)
    {
        double avg_real_volume = (double)total_real_volume / (copied - zero_real_volumes);
        Print("║ ", GetLocalizedText("real_volumes"), ":");
        Print("║   ", GetLocalizedText("average"), ": ", (long)avg_real_volume);
        Print("║   ", GetLocalizedText("maximum"), ": ", max_real_volume);
        Print("║   ", GetLocalizedText("minimum"), ": ", min_real_volume);
        Print("║   ", GetLocalizedText("zero_bars"), ": ", zero_real_volumes, " (", 
              MathRound(zero_real_volumes * 100.0 / copied), "%)");
    }
    else
    {
        Print("║ ", GetLocalizedText("real_volumes_unavailable"));
    }
    
    Print("╠══════════════════════════════════════════════════════════════════╣");
    
    // Data quality assessment
    string quality_assessment = "";
    string recommendation = "";
    
    if(!has_real_volumes && zero_tick_volumes > copied * 0.5)
    {
        quality_assessment = GetLocalizedText("critical_no_volumes");
        recommendation = GetLocalizedText("change_instrument");
    }
    else if(!has_real_volumes && (max_tick_volume - min_tick_volume) < avg_tick_volume * 0.1)
    {
        quality_assessment = GetLocalizedText("poor_no_variation");
        recommendation = GetLocalizedText("may_work_incorrectly");
    }
    else if(!has_real_volumes)
    {
        quality_assessment = GetLocalizedText("satisfactory_tick_only");
        recommendation = GetLocalizedText("will_work_less_accurate");
    }
    else if(has_real_volumes && zero_real_volumes < copied * 0.1)
    {
        quality_assessment = GetLocalizedText("excellent_real_volumes");
        recommendation = GetLocalizedText("will_work_max_accurate");
    }
    else
    {
        quality_assessment = GetLocalizedText("good_real_gaps");
        recommendation = GetLocalizedText("will_work_correctly");
    }
    
    Print("║ ", GetLocalizedText("quality_assessment"), ": ", quality_assessment);
    Print("║ ", GetLocalizedText("recommendation"), ": ", recommendation);
    
    // Indicator settings
    Print("╠══════════════════════════════════════════════════════════════════╣");
    Print("║ ", GetLocalizedText("indicator_settings"), ":");
    
    if(has_real_volumes && UseRealVolume)
    {
        Print("║   ", GetLocalizedText("will_use_real"));
    }
    else
    {
        Print("║   ", GetLocalizedText("will_use_tick"));
    }
    
    Print("║   VFI Length: ", VFI_Length);
    Print("║   Coefficient: ", Coef);
    Print("║   Max Volume Cutoff: ", VCoef);
    Print("║   Signal Length: ", SignalLength);
    Print("║   Smooth VFI: ", SmoothVFI ? GetLocalizedText("yes") : GetLocalizedText("no"));
    Print("║   Show Histogram: ", ShowHisto ? GetLocalizedText("yes") : GetLocalizedText("no"));
    
    Print("╚══════════════════════════════════════════════════════════════════╝");
}

//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
{
    // Минимальное количество баров для расчета
    int min_bars = VFI_Length + 50;
    if(rates_total < min_bars)
        return(0);
    
    // ИСПРАВЛЕНИЕ: При изменении настроек пересчитываем все
    bool recalculate_all = false;
    if(prev_calculated == 0 || last_calculated > prev_calculated)
    {
        recalculate_all = true;
        last_calculated = 0;
        
        Print("ℹ️ ", GetLocalizedText("settings_changed"));
        
        // Инициализируем буферы
        ArrayInitialize(VFI_Buffer, EMPTY_VALUE);
        ArrayInitialize(VFI_EMA_Buffer, EMPTY_VALUE);
        ArrayInitialize(Histogram_Buffer, EMPTY_VALUE);
        ArrayInitialize(VCP_Buffer, 0.0);
    }
    
    //--- resize calculation arrays
    if(ArraySize(inter_array) != rates_total || recalculate_all)
    {
        ArrayResize(inter_array, rates_total);
        ArrayResize(typical_array, rates_total);
        ArrayInitialize(inter_array, 0.0);
        ArrayInitialize(typical_array, 0.0);
    }
    
    // Определяем начальную позицию для расчета
    int start;
    if(recalculate_all)
    {
        start = min_bars;
    }
    else
    {
        start = MathMax(prev_calculated - 1, min_bars);
    }
    
    //--- calculate typical prices and inter values from the beginning
    int calc_start = recalculate_all ? 1 : MathMax(1, start - 100);
    
    for(int i = calc_start; i < rates_total; i++)
    {
        // ИСПРАВЛЕНИЕ: Проверяем валидность цен
        if(high[i] <= 0 || low[i] <= 0 || close[i] <= 0)
        {
            typical_array[i] = i > 0 ? typical_array[i-1] : close[i];
        }
        else
        {
            typical_array[i] = (high[i] + low[i] + close[i]) / 3.0;
        }
        
        if(i > 0 && typical_array[i-1] > 0 && typical_array[i] > 0)
        {
            double log_diff = MathLog(typical_array[i]) - MathLog(typical_array[i-1]);
            // ИСПРАВЛЕНИЕ: Ограничиваем экстремальные значения
            if(MathAbs(log_diff) > 1.0) // Ограничение на 100% изменение
                log_diff = log_diff > 0 ? 1.0 : -1.0;
            inter_array[i] = log_diff;
        }
        else
        {
            inter_array[i] = 0.0;
        }
    }
    
    //--- main calculation loop
    for(int i = start; i < rates_total; i++)
    {
        //--- calculate vinter (standard deviation of inter over 30 periods)
        double vinter = CalculateStdDev(i, MathMin(30, i));
        
        // ИСПРАВЛЕНИЕ: Защита от слишком маленьких значений
        if(vinter < 0.0001)
            vinter = 0.0001;
        
        //--- calculate cutoff
        double cutoff = Coef * vinter * close[i];
        
        //--- calculate volume average over VFI_Length periods
        double vave = 0.0;
        int vol_start = MathMax(0, i - VFI_Length);
        int vol_count = 0;
        
        // Determine which volumes to use
        bool use_real = UseRealVolume && real_volumes_available;
        
        for(int j = vol_start; j < i; j++)
        {
            double vol_value = use_real ? (double)volume[j] : (double)tick_volume[j];
            if(vol_value > 0) // Исключаем нулевые объемы
            {
                vave += vol_value;
                vol_count++;
            }
        }
        
        // ИСПРАВЛЕНИЕ: Защита от деления на ноль
        if(vol_count > 0)
            vave /= (double)vol_count;
        else
            vave = use_real ? (double)volume[i] : (double)tick_volume[i];
            
        if(vave <= 0)
            vave = 1.0; // Минимальное значение
        
        //--- calculate vmax
        double vmax = vave * VCoef;
        
        //--- calculate vc (min of current volume and vmax)
        double vol_current = use_real ? (double)volume[i] : (double)tick_volume[i];
        if(vol_current <= 0)
            vol_current = vave; // Используем среднее значение
            
        double vc = MathMin(vol_current, vmax);
        
        //--- calculate mf (money flow)
        double mf = 0.0;
        if(i > 0)
            mf = typical_array[i] - typical_array[i-1];
        
        //--- calculate vcp
        double vcp = 0.0;
        if(mf > cutoff)
            vcp = vc;
        else if(mf < -cutoff)
            vcp = -vc;
        else
            vcp = 0.0;
        
        VCP_Buffer[i] = vcp;
        
        //--- calculate VFI (sum of vcp over VFI_Length periods divided by vave)
        double vcp_sum = 0.0;
        int vcp_start = MathMax(0, i - VFI_Length + 1);
        for(int j = vcp_start; j <= i; j++)
        {
            vcp_sum += VCP_Buffer[j];
        }
        
        // ИСПРАВЛЕНИЕ: Дополнительная защита от больших значений
        double vfi_raw = vcp_sum / vave;
        if(MathAbs(vfi_raw) > 1000) // Ограничиваем максимальное значение
            vfi_raw = vfi_raw > 0 ? 1000 : -1000;
        
        //--- apply smoothing if needed (SMA with period 3)
        if(SmoothVFI && i >= start + 2)
        {
            double vfi_sum = vfi_raw;
            int count = 1;
            
            for(int j = 1; j <= 2 && (i-j) >= start; j++)
            {
                if(VFI_Buffer[i-j] != EMPTY_VALUE)
                {
                    vfi_sum += VFI_Buffer[i-j];
                    count++;
                }
            }
            
            VFI_Buffer[i] = vfi_sum / count;
        }
        else
        {
            VFI_Buffer[i] = vfi_raw;
        }
        
        //--- calculate VFI EMA
        if(i == start || VFI_EMA_Buffer[i-1] == EMPTY_VALUE)
        {
            VFI_EMA_Buffer[i] = VFI_Buffer[i];
        }
        else
        {
            double alpha = 2.0 / (SignalLength + 1.0);
            VFI_EMA_Buffer[i] = alpha * VFI_Buffer[i] + (1.0 - alpha) * VFI_EMA_Buffer[i-1];
        }
        
        //--- calculate histogram
        if(ShowHisto)
            Histogram_Buffer[i] = VFI_Buffer[i] - VFI_EMA_Buffer[i];
        else
            Histogram_Buffer[i] = EMPTY_VALUE;
    }
    
    last_calculated = rates_total;
    return(rates_total);
}

//+------------------------------------------------------------------+
//| Calculate Standard Deviation for inter values - IMPROVED        |
//+------------------------------------------------------------------+
double CalculateStdDev(int pos, int period)
{
    if(pos < 1 || period < 1)
        return(0.0001); // Минимальное значение вместо 0
    
    int actual_period = MathMin(period, pos + 1);
    int start_pos = pos - actual_period + 1;
    
    //--- calculate mean
    double mean = 0.0;
    int valid_count = 0;
    
    for(int i = start_pos; i <= pos; i++)
    {
        if(i >= 0 && i < ArraySize(inter_array))
        {
            mean += inter_array[i];
            valid_count++;
        }
    }
    
    if(valid_count == 0)
        return(0.0001);
        
    mean /= valid_count;
    
    //--- calculate variance
    double variance = 0.0;
    for(int i = start_pos; i <= pos; i++)
    {
        if(i >= 0 && i < ArraySize(inter_array))
        {
            variance += MathPow(inter_array[i] - mean, 2);
        }
    }
    variance /= valid_count;
    
    double std_dev = MathSqrt(variance);
    
    // ИСПРАВЛЕНИЕ: Возвращаем минимальное значение если результат слишком мал
    return(MathMax(std_dev, 0.0001));
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    string username = GetComputerUserName();
    string current_datetime = GetCurrentDateTime();
    
    Print("╔══════════════════════════════════════════════════════════════════╗");
    Print("║", GetLocalizedText("indicator_finished"), "║");
    Print("║ ", GetLocalizedText("reason"), ": ", reason);
    Print("║ ", GetLocalizedText("time"), ": ", current_datetime, " UTC");
    Print("║ ", GetLocalizedText("user"), ": ", username);
    Print("╚══════════════════════════════════════════════════════════════════╝");
}
